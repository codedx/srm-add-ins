
packages = './...' # packages to process (for help specifying packages, run: go help packages)
options = []       # staticcheck options (must not conflict with options set by Code Dx)

[source-code]

relativeDirectory=''                    # source code directory specified by relative directory name (overrides projectFileDirectoryPatterns)
projectFileDirectoryPatterns=['go.mod'] # patterns (e.g., *.sln,*.csproj) to find source code directory by largest, first file found


[request]  # (reserved for Code Dx use)

# The image name contains the Docker image that handles this scan request file.
#
imageName = "codedx/codedx-staticcheckrunner:v1.47.0"

# The work directory stores k8s secrets, trusted CA certificates,a copy of the scan request
# file, and the exit code file. The user running the Docker image *must* have write access
# to the work directory.
#
# $workDirectory/analysis-exit-code  - exit code of the shell command
# $workDirectory/ca-certificates     - trusted CA certificates
# $workDirectory/config/request.toml - a copy of the scan request file
# $workDirectory/input               - analysis input
# $workDirectory/workflow-secrets    - workflow secrets
#
workDirectory = "/opt/codedx/staticcheck/work"

# The shell cmd to run as the entry point for the tool.
#
shellCmd = '''
	source=$(ls /opt/codedx/staticcheck/work/input)
	pwsh /opt/codedx/staticcheck/script/StaticCheck.ps1 \
		"/opt/codedx/staticcheck/work/input/$source" \
		/opt/codedx/staticcheck/work/output/staticcheck.results \
		/opt/codedx/staticcheck/work/config/request.toml
'''

# The result file contains the tool output provided to Code Dx.
#
resultFilePath = "/opt/codedx/staticcheck/work/output/staticcheck.results"

# The Intelligent Orchestration security activities supported by this tool (e.g., sca, sast, dast)
#
securityActivities = ['sast']
