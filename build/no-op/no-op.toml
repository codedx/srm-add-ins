[request]  # (reserved for Code Dx use)

# The image name contains the Docker image that handles this scan request file.
#
imageName = "alpine"

# The work directory stores k8s secrets, trusted CA certificates,a copy of the scan request
# file, and the exit code file. The user running the Docker image *must* have write access
# to the work directory.
#
# $workDirectory/analysis-exit-code  - exit code of the shell command
# $workDirectory/ca-certificates     - trusted CA certificates
# $workDirectory/config/request.toml - a copy of the scan request file
# $workDirectory/input               - analysis input
# $workDirectory/workflow-secrets    - workflow secrets
#
workDirectory = "/tmp"

# The pre-shell cmd is an optional command to run before the shell command. The
# shell command will not run if the pre-shell command exit code is non-zero.
#
preShellCmd = '''
	echo "preShellCmd time is $(date)" > /tmp/preShellCmd.log
'''

# The shell cmd to run as the entry point for the tool.
#
shellCmd = '''
echo '<report date="2021-05-27" tool="Tool" generator="Generator" version="1.0.0">
  <findings/>
</report>' > /tmp/output.rpt
'''

# The post-shell cmd is an optional command to run after the shell command 
# completes. The post-shell cmd will not run if the shell command returns a
# non-zero exit code. The exit code of the post-shell command will be the
# overall exit code if the post-shell command runs.
#
postShellCmd = '''
	echo "postShellCmd time is $(date)" > /tmp/postShellCmd.log
	ls -laR /tmp >> /tmp/postShellCmd.log
'''

# The log file path list contains zero or more log files for the tool run. Log
# files get copied to workflow storage and are accessible from the tool service API.
#
logFilePaths = ["/tmp/preShellCmd.log", "/tmp/postShellCmd.log"]

# The result file contains the tool output provided to Code Dx.
#
resultFilePath = "/tmp/output.rpt"

# The list of emptyDir volumes for the tool.
#
ephemeralVolumePaths = ["/tmp"]

[request.workflowSecurityContext]

# The pod security context for the tool.
#
podSecurityContext = '''
{
	"fsGroup": 1000,
	"runAsGroup": 1000,
	"runAsUser": 1000,
	"runAsNonRoot": true,
	"seccompProfile": {
		"type": "RuntimeDefault"
	},
	"supplementalGroups": []
}
'''

# The container security context for the tool.
#
securityContext = '''
{
	"allowPrivilegeEscalation": false,
	"capabilities": {
		"drop": [
			"ALL"
		]
	},
	"readOnlyRootFilesystem": true
}
'''