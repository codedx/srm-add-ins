commit = ''
commitShort = ''

buildName = 'Code Dx Add-Ins'
gitHubRepo = 'codedx/codedx-add-ins'

nextVersion = ''
hasNextVersion = false

def setBuildStatus(repo, commit, status, description) {
	script {
		github.setBuildStatus(repo, commit, 'add-ins/jenkins/build', status, description)
	}
}

def getRepo(useLFS=false) {

	options = [
		[$class: 'RelativeTargetDirectory', relativeTargetDir: 'repo'],
		[$class: 'PruneStaleBranch'],
		[$class: 'CleanCheckout']
	]
	if (useLFS) {
		options += [$class: 'GitLFSPull']
	}

	checkout([$class: 'GitSCM',
		branches: scm.branches,
		browser: scm.browser,
		doGenerateSubmoduleConfigurations: false,
		extensions: options,
		submoduleCfg: scm.submoduleCfg,
		userRemoteConfigs: scm.userRemoteConfigs
	]).GIT_COMMIT
}

pipeline {

	options {
		skipDefaultCheckout true // we will checkout later
	}

	agent none

	stages {

		stage('Build') {

			agent {
				label 'codedx-tool-orchestration-build-large'
			}

			stages {

				stage('Build - Checkout') {
					steps {
						script {
							commit = getRepo(false)
							currentBuild.displayName = commit
							commitShort = "${commit.substring(0, 10)}"

							analyze.packageRepo("$WORKSPACE/repo", "$WORKSPACE/repo.zip")
						}
					}
				}

				stage('Build - Compile') {
					steps {
						script {
							setBuildStatus(gitHubRepo, commit, 'pending', 'Building')
						}

						sh 'cd "$WORKSPACE/repo" && go mod tidy && go install ./...'
					}
				}

				stage('Build - Test') {
					steps {
						script {
							setBuildStatus(gitHubRepo, commit, 'pending', 'Testing')
						}

						sh 'cd "$WORKSPACE/repo" && go test ./...'
					}
				}

				stage('Build - Analyze') {
					when { branch 'main' }
					steps {
						script {
							setBuildStatus(gitHubRepo, commit, 'pending', 'Analyzing')
						}

						withCredentials([
							string(credentialsId: 'codedx-internal-api-key', variable: 'API_KEY'),
							string(credentialsId: 'codedx-internal-url', variable: 'CODEDX_URL')
						]) {
							script {
								tools = '@("Checkstyle","ErrCheck","Go Vet","GoLint","GoSec","IneffAssign","PMD","Pylint","Staticcheck")'
								analyze.runAnalysis(CODEDX_URL, API_KEY, 10, "$WORKSPACE/repo.zip", '@()', tools, '@()', 900, false)
							}
						}
					}
				}

				stage('Build - Has Next Version') {
					steps {
						script {
							dir ('repo') {
								withCredentials([usernamePassword(credentialsId: 'codedx-build-github', usernameVariable: 'username', passwordVariable: 'token')]) {
									outputPreview = release.runSemanticRelease(token, true)
									nextVersion = release.getNextVersion(outputPreview)
									hasNextVersion = nextVersion != ''
									println("Next version is '$nextVersion' (hasNextVersion=$hasNextVersion)")
								}
							}
						}
					}
				}
			}

			post {
				success {
					script {
						setBuildStatus(gitHubRepo, commit, 'success', '')
					}

					milestone ordinal: 1, label: "$buildName Build Success"
                    script {
                        slack.info "$buildName Build stage succeeded (Docker Build pending): <${env.BUILD_URL}console|Open>"
                    }
				}
				failure {
					script {
						setBuildStatus(gitHubRepo, commit, 'failed', 'Build failed')
					}

                    script {
                        slack.error "$buildName Build stage failed: <${env.BUILD_URL}console|Open>"
                    }
				}
			}
		}

		stage('Docker Build') {

			input {
				message "Build and publish Docker images to AWS registry?"
			}

			agent {
				label 'codedx-tool-orchestration-build-large'
			}

			stages {

				stage('Docker Build - Milestone') {
					steps {
						milestone ordinal: 2, label: 'Promoted to Docker Publish'
					}
				}

				stage('Docker Build - Checkout') {
					steps {
						script {
							getRepo(false)
						}
					}
				}

				stage('Docker Build - Copy Licenses') {
					steps {
						script {
							sh 'pwsh "$WORKSPACE/repo/build/copy-licenses.ps1"'
						}
					}
				}

				stage('Docker Build - blackduck') {
					steps {
						script {
							dir ('repo/build/blackduck') {
								release.buildPrivateDockerImage('codedx/codedx-blackduckrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - blackduck-dotnet') {
					steps {
						script {
							dir ('repo/build/blackduck-dotnet') {
								release.buildPrivateDockerImage('codedx/codedx-blackduckrunner-dotnet', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-blackduckrunner:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - blackduck-go') {
					steps {
						script {
							dir ('repo/build/blackduck-go') {
								release.buildPrivateDockerImage('codedx/codedx-blackduckrunner-go', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-blackduckrunner:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - blackduck-sbt-java8') {
					steps {
						script {
							dir ('repo/build/blackduck-sbt-java8') {
								release.buildPrivateDockerImage('codedx/codedx-blackduckrunner-sbt', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-blackduckrunner:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - blackduck-sbt-java11') {
					steps {
						script {
							dir ('repo/build/blackduck-sbt-java11') {
								release.buildPrivateDockerImage('codedx/codedx-blackduckrunner-sbt-java11', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-blackduckrunner:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - burpsuite') {
					steps {
						script {
							dir ('repo/build/burpsuite') {
								release.buildPrivateDockerImage('codedx/codedx-burpsuiterunnerbase', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - checkmarx') {
					steps {
						script {
							dir ('repo/build/checkmarx') {
								release.buildPrivateDockerImage('codedx/codedx-checkmarxrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - coverity') {
					steps {
						script {
							dir ('repo/build/coverity') {
								release.buildPrivateDockerImage('codedx/codedx-coverityrunnerbase', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - coverity-dotnet') {
					steps {
						script {
							dir ('repo/build/coverity-dotnet') {
								release.buildPrivateDockerImage('codedx/codedx-coverityrunnerbase-dotnet', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-coverityrunnerbase:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - coverity-go') {
					steps {
						script {
							dir ('repo/build/coverity-go') {
								release.buildPrivateDockerImage('codedx/codedx-coverityrunnerbase-go', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-coverityrunnerbase:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - coverity-sbt-java8') {
					steps {
						script {
							dir ('repo/build/coverity-sbt-java8') {
								release.buildPrivateDockerImage('codedx/codedx-coverityrunnerbase-sbt', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-coverityrunnerbase:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - coverity-sbt-java11') {
					steps {
						script {
							dir ('repo/build/coverity-sbt-java11') {
								release.buildPrivateDockerImage('codedx/codedx-coverityrunnerbase-sbt-java11', commitShort, 'Dockerfile', '../..', ["BASE": "codedx/codedx-coverityrunnerbase:$commitShort"])
							}
						}
					}
				}

				stage('Docker Build - golangci-lint') {
					steps {
						script {
							dir ('repo/build/golangci-lint') {
								release.buildPrivateDockerImage('codedx/codedx-golangci-lintrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - gosec') {
					steps {
						script {
							dir ('repo/build/gosec') {
								release.buildPrivateDockerImage('codedx/codedx-gosecrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - govet') {
					steps {
						script {
							dir ('repo/build/govet') {
								release.buildPrivateDockerImage('codedx/codedx-govetrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - securitycodescan') {
					steps {
						script {
							dir ('repo/build/securitycodescan') {
								release.buildPrivateDockerImage('codedx/codedx-securitycodescanrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - staticcheck') {
					steps {
						script {
							dir ('repo/build/staticcheck') {
								release.buildPrivateDockerImage('codedx/codedx-staticcheckrunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}

				stage('Docker Build - zap') {
					steps {
						script {
							dir ('repo/build/zap') {
								release.buildPrivateDockerImage('codedx/codedx-zaprunner', commitShort, 'Dockerfile', '../..')
							}
						}
					}
				}
			}

			post {
				success {
					script {
						nextStageMessage = "$buildName Docker Build stage succeeded"
						if (hasNextVersion) {
							nextStageMessage += "(Release pending)"
						}
						nextStageMessage += ": <${env.BUILD_URL}console|Open>"

                        slack.info nextStageMessage
					}
				}
				failure {
                    script {
                        slack.error "$buildName Docker Build stage failed: <${env.BUILD_URL}console|Open>"
                    }
				}
			}
		}

		stage('Release') {

			when {
				branch 'main'
				beforeInput true
				expression { return hasNextVersion }
			}

			input {
				message 'Release Docker image(s) to Docker Hub?'
			}

			agent {
				label 'codedx-tool-orchestration-build-large'
			}

			stages {

				stage('Release - Milestone') {
					steps {
						milestone ordinal: 3, label: "$buildName Release Promotion"
					}
				}

				stage('Release - Checkout') {
					steps {
						script {
							getRepo(false)
						}
					}
				}

				stage('Release - blackduck') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-blackduckrunner', 'codedx/codedx-blackduckrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - blackduck-dotnet') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-blackduckrunner-dotnet', 'codedx/codedx-blackduckrunner-dotnet', commitShort, nextVersion)
						}
					}
				}

				stage('Release - blackduck-go') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-blackduckrunner-go', 'codedx/codedx-blackduckrunner-go', commitShort, nextVersion)
						}
					}
				}

				stage('Release - blackduck-sbt-java8') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-blackduckrunner-sbt', 'codedx/codedx-blackduckrunner-sbt', commitShort, nextVersion)
						}
					}
				}

				stage('Release - blackduck-sbt-java11') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-blackduckrunner-sbt-java11', 'codedx/codedx-blackduckrunner-sbt-java11', commitShort, nextVersion)
						}
					}
				}

				stage('Release - burpsuite') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-burpsuiterunnerbase', 'codedx/codedx-burpsuiterunnerbase', commitShort, nextVersion)
						}
					}
				}

				stage('Release - checkmarx') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-checkmarxrunner', 'codedx/codedx-checkmarxrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - coverity') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-coverityrunnerbase', 'codedx/codedx-coverityrunnerbase', commitShort, nextVersion)
						}
					}
				}

				stage('Release - coverity-dotnet') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-coverityrunnerbase-dotnet', 'codedx/codedx-coverityrunnerbase-dotnet', commitShort, nextVersion)
						}
					}
				}

				stage('Release - coverity-go') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-coverityrunnerbase-go', 'codedx/codedx-coverityrunnerbase-go', commitShort, nextVersion)
						}
					}
				}

				stage('Release - coverity-sbt-java8') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-coverityrunnerbase-sbt', 'codedx/codedx-coverityrunnerbase-sbt', commitShort, nextVersion)
						}
					}
				}

				stage('Release - coverity-sbt-java11') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-coverityrunnerbase-sbt-java11', 'codedx/codedx-coverityrunnerbase-sbt-java11', commitShort, nextVersion)
						}
					}
				}

				stage('Release - golangci-lint') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-golangci-lintrunner', 'codedx/codedx-golangci-lintrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - gosec') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-gosecrunner', 'codedx/codedx-gosecrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - govet') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-govetrunner', 'codedx/codedx-govetrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - securitycodescan') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-securitycodescanrunner', 'codedx/codedx-securitycodescanrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - staticcheck') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-staticcheckrunner', 'codedx/codedx-staticcheckrunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - zap') {
					steps {
						script {
							release.releaseDockerImage('codedx/codedx-zaprunner', 'codedx/codedx-zaprunner', commitShort, nextVersion)
						}
					}
				}

				stage('Release - GitHub Create Version') {
					steps {
						script {
							dir ('repo') {
								withCredentials([usernamePassword(credentialsId: 'codedx-build-github', usernameVariable: 'username', passwordVariable: 'token')]) {

									output = release.runSemanticRelease(token, false)
									versionReleased = release.getNextVersion(output)
									if (versionReleased != nextVersion) {
										error("Build failed because released version ($versionReleased) does not match expected version ($nextVersion)")
									}
								}
							}
						}
					}
				}
			}

			post {
				success {
                    script {
                        slack.info "$buildName Release stage succeeded: <${env.BUILD_URL}console|Open>"
                    }
				}
				failure {
                    script {
                        slack.error "$buildName Release stage failed: <${env.BUILD_URL}console|Open>"
                    }
				}
			}
		}
	}
}
